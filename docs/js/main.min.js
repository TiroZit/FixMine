"use strict";

document.querySelector(".welcome__body") && (document.querySelector(".welcome__body").onclick = function (e) {
  if (e.target.classList.contains("ip")) {
    var _e = document.getElementById("ip").textContent;
    navigator.clipboard.writeText(_e).then(function () {
      document.querySelector(".ip").innerHTML = "Скопировано", setTimeout(function () {
        return document.querySelector(".ip").innerHTML = _e;
      }, 1500);
    });
  }
});
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Modal = /*#__PURE__*/function () {
  function Modal(t) {
    _classCallCheck(this, Modal);

    this.options = Object.assign({
      isOpen: function isOpen() {},
      isClose: function isClose() {}
    }, t), this.modal = document.querySelector(".modal"), this.speed = !1, this.animation = !1, this.isOpen = !1, this.modalContainer = !1, this.previousActiveElement = !1, this.fixBlocks = document.querySelectorAll(".fix-block"), this.focusElements = ["a[href]", "input", "button", "select", "textarea", "[tabindex]"], this.events();
  }

  _createClass(Modal, [{
    key: "events",
    value: function events() {
      this.modal && (document.addEventListener("click", function (t) {
        var e = t.target.closest("[data-path]");

        if (e) {
          var _t = e.dataset.path,
              s = e.dataset.animation,
              o = e.dataset.speed;
          return this.animation = s || "fade", this.speed = o ? parseInt(o) : 300, this.modalContainer = document.querySelector("[data-target=\"".concat(_t, "\"]")), void this.open();
        }

        t.target.closest(".modal-close") && this.close();
      }.bind(this)), window.addEventListener("keydown", function (t) {
        27 == t.keyCode && this.isOpen && this.close(), 9 == t.keyCode && this.isOpen && this.focusCatch(t);
      }.bind(this)), this.modal.addEventListener("click", function (t) {
        t.target.classList.contains("modal__body") || t.target.closest(".modal__body") || !this.isOpen || this.close();
      }.bind(this)));
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;

      this.previousActiveElement = document.activeElement, this.modal.style.setProperty("--transition-time", this.speed / 1e3 + "s"), this.modal.classList.add("is-open"), this.disableScroll(), this.modalContainer.classList.add("modal-open"), this.modalContainer.classList.add(this.animation), setTimeout(function () {
        _this.options.isOpen(_this), _this.modalContainer.classList.add("animate-open"), _this.isOpen = !0, _this.focusTrap();
      }, this.speed);
    }
  }, {
    key: "close",
    value: function close() {
      this.modalContainer && (this.modalContainer.classList.remove("animate-open"), this.modalContainer.classList.remove(this.animation), this.modal.classList.remove("is-open"), this.modalContainer.classList.remove("modal-open"), this.enableScroll(), this.options.isClose(this), this.isOpen = !1, this.focusTrap());
    }
  }, {
    key: "focusCatch",
    value: function focusCatch(t) {
      var e = this.modalContainer.querySelectorAll(this.focusElements),
          s = Array.prototype.slice.call(e),
          o = s.indexOf(document.activeElement);
      t.shiftKey && 0 === o && (s[s.length - 1].focus(), t.preventDefault()), t.shiftKey || o !== s.length - 1 || (s[0].focus(), t.preventDefault());
    }
  }, {
    key: "focusTrap",
    value: function focusTrap() {
      var t = this.modalContainer.querySelectorAll(this.focusElements);
      this.isOpen ? t[0].focus() : this.previousActiveElement.focus();
    }
  }, {
    key: "disableScroll",
    value: function disableScroll() {
      var t = window.scrollY;
      this.lockPadding(), document.body.classList.add("disable-scroll"), document.body.dataset.position = t, document.body.style.top = -t + "px";
    }
  }, {
    key: "enableScroll",
    value: function enableScroll() {
      var t = parseInt(document.body.dataset.position, 10);
      this.unlockPadding(), document.body.style.top = "auto", document.body.classList.remove("disable-scroll"), window.scroll({
        top: t,
        left: 0
      }), document.body.removeAttribute("data-position");
    }
  }, {
    key: "lockPadding",
    value: function lockPadding() {
      var t = window.innerWidth - document.body.offsetWidth + "px";
      this.fixBlocks.forEach(function (e) {
        e.style.paddingRight = t;
      }), document.body.style.paddingRight = t;
    }
  }, {
    key: "unlockPadding",
    value: function unlockPadding() {
      this.fixBlocks.forEach(function (t) {
        t.style.paddingRight = "0px";
      }), document.body.style.paddingRight = "0px";
    }
  }]);

  return Modal;
}();

var modal = new Modal({
  isOpen: function isOpen(t) {
    console.log(t), console.log("opened");
  },
  isClose: function isClose() {
    console.log("closed");
  }
});
"use strict";

if (document.querySelector(".goods__item")) {
  var e = document.getElementById("rangeValue"),
      t = document.getElementById("rangeValue8"),
      n = document.querySelector(".goods__range");
  n.oninput = function () {
    var o = n.value;
    e.textContent = o, t.textContent = 8 * o;
  }, n.addEventListener("mousemove", function () {
    var e = n.value,
        t = "linear-gradient(90deg, #ffb900" + e + "%, #cdcdcd" + e + "%)";
    n.style.background = t;
  });
}
"use strict";

window.addEventListener("DOMContentLoaded", function () {
  tabbis();
});
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var tabbisClass = /*#__PURE__*/function () {
  function tabbisClass() {
    _classCallCheck(this, tabbisClass);
  }

  _createClass(tabbisClass, [{
    key: "init",
    value: function init(t) {
      this.thisOptions(t), this.thisMemory(), this.setup();
    }
  }, {
    key: "setup",
    value: function setup() {
      var _this = this;

      var t = document.querySelectorAll(this.options.paneGroup);
      document.querySelectorAll(this.options.tabGroup).forEach(function (e, i) {
        var s = t[i],
            r = _this.getActiveIndex(e, i);

        e.setAttribute("role", "tablist"), _this.resetTabs(_toConsumableArray(e.children)), _this.resetPanes(_toConsumableArray(s.children)), _toConsumableArray(e.children).forEach(function (t, e) {
          var r = s.children[e];
          _this.addTabAttributes(t, i), _this.addPaneAttributes(t, r), t.groupIndex = i, t.addEventListener(_this.options.trigger, function (e) {
            _this.activate(e.currentTarget, t.groupIndex);
          }), _this.options.keyboardNavigation && t.addEventListener("keydown", function (t) {
            _this.eventKey(t);
          });
        }), null !== r && (_this.activateTab(_toConsumableArray(e.children)[r]), _this.activatePane(_toConsumableArray(s.children)[r]));
      });
    }
  }, {
    key: "eventKey",
    value: function eventKey(t) {
      [13, 37, 38, 39, 40].includes(t.keyCode) && t.preventDefault(), 13 == t.keyCode ? t.currentTarget.click() : [39, 40].includes(t.keyCode) ? this.step(t, 1) : [37, 38].includes(t.keyCode) && this.step(t, -1);
    }
  }, {
    key: "index",
    value: function index(t) {
      return _toConsumableArray(t.parentElement.children).indexOf(t);
    }
  }, {
    key: "step",
    value: function step(t, e) {
      var i = t.currentTarget.parentElement.children;
      this.resetTabindex(i);
      var s = i[this.pos(t.currentTarget, i, e)];
      s.focus(), s.setAttribute("tabindex", 0);
    }
  }, {
    key: "resetTabindex",
    value: function resetTabindex(t) {
      _toConsumableArray(t).forEach(function (t) {
        t.setAttribute("tabindex", "-1");
      });
    }
  }, {
    key: "pos",
    value: function pos(t, e, i) {
      var s = this.index(t);
      return s += i, e.length <= s ? s = 0 : -1 == s && (s = e.length - 1), s;
    }
  }, {
    key: "emitEvent",
    value: function emitEvent(t, e) {
      var i = new CustomEvent("tabbis", {
        bubbles: !0,
        detail: {
          tab: t,
          pane: e
        }
      });
      t.dispatchEvent(i);
    }
  }, {
    key: "getActiveIndex",
    value: function getActiveIndex(t, e) {
      var i = this.loadMemory(e);
      if (void 0 !== i) return i;
      {
        var _e = t.querySelector(this.options.tabActive);

        return _e || (_e = t.querySelector('[aria-selected="true"]')), _e ? this.index(_e) : !1 !== this.options.tabActiveFallback ? this.options.tabActiveFallback : null;
      }
    }
  }, {
    key: "addTabAttributes",
    value: function addTabAttributes(t, e) {
      var i = this.index(t),
          s = this.options.prefix;
      t.setAttribute("role", "tab"), t.setAttribute("aria-controls", "".concat(s, "tabpanel-").concat(e, "-").concat(i)), t.setAttribute("id", "".concat(s, "tab-").concat(e, "-").concat(i));
    }
  }, {
    key: "addPaneAttributes",
    value: function addPaneAttributes(t, e) {
      e.setAttribute("role", "tabpanel"), e.setAttribute("aria-labelledby", t.getAttribute("id")), e.setAttribute("id", t.getAttribute("aria-controls")), e.setAttribute("tabindex", "0");
    }
  }, {
    key: "activate",
    value: function activate(t, e) {
      var i = document.querySelector("#" + t.getAttribute("aria-controls"));
      this.resetTabs(_toConsumableArray(t.parentNode.children)), this.resetPanes(_toConsumableArray(i.parentElement.children)), this.activateTab(t), this.activatePane(i), this.saveMemory(t, e), this.emitEvent(t, i);
    }
  }, {
    key: "activateTab",
    value: function activateTab(t) {
      t.setAttribute("aria-selected", "true"), t.setAttribute("tabindex", "0");
    }
  }, {
    key: "activatePane",
    value: function activatePane(t) {
      t.removeAttribute("hidden");
    }
  }, {
    key: "resetTabs",
    value: function resetTabs(t) {
      t.forEach(function (t) {
        return t.setAttribute("aria-selected", "false");
      }), this.resetTabindex(t);
    }
  }, {
    key: "resetPanes",
    value: function resetPanes(t) {
      t.forEach(function (t) {
        return t.setAttribute("hidden", "");
      });
    }
  }, {
    key: "loadMemory",
    value: function loadMemory(t) {
      if (this.options.memory && void 0 !== this.memory[t] && null !== this.memory[t]) return parseInt(this.memory[t]);
    }
  }, {
    key: "saveMemory",
    value: function saveMemory(t, e) {
      this.options.memory && (this.memory[e] = this.index(t), localStorage.setItem(this.options.memory, JSON.stringify(this.memory)));
    }
  }, {
    key: "thisMemory",
    value: function thisMemory() {
      if (!this.options.memory) return;
      var t = localStorage.getItem(this.options.memory);
      this.memory = null !== t ? JSON.parse(t) : [];
    }
  }, {
    key: "defaults",
    value: function defaults() {
      return {
        keyboardNavigation: !0,
        memory: !1,
        paneGroup: "[data-panes]",
        prefix: "",
        tabActive: "[data-active]",
        tabActiveFallback: 0,
        tabGroup: "[data-tabs]",
        trigger: "click"
      };
    }
  }, {
    key: "thisOptions",
    value: function thisOptions(t) {
      this.options = Object.assign(this.defaults(), t), !0 === this.options.memory && (this.options.memory = "tabbis");
    }
  }]);

  return tabbisClass;
}();

function tabbis() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new tabbisClass().init(t);
}
"use strict";